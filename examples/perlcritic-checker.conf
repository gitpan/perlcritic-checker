#
# $Id: perlcritic-checker.conf 52 2011-02-25 11:56:11Z xdr.box $
#
# perlcritic-checker's config example
#

{

    # Progressive mode: {0|1}. In progressive mode perlcritic-checker
    # doesn't complains about existing violations but prevents
    # introducing new ones. Nice feature for applying Perl::Critic
    # to the existing projects gradually.
    progressive_mode => 1,

    # Emergency commits: {0|1}. There are situations when you *do* need
    # to commit changes bypassing all checks (e.g. emergency bug fixes).
    # This featue allows you bypass Perl::Critic using "magic" prefix in
    # comment message, e.g.: svn ci -m "NO CRITIC: I am in hurry" FooBar.pm
    allow_emergency_commits => 1,

    # Magic prefix described above can be customized:
    emergency_comment_prefix => 'NO CRITIC',

    # Limit maximal number of reported violations. This parameter works
    # differently in strict and progressive modes. In strict mode it
    # will truncate long list of violations: only N most severe violations
    # will be shown. In progressive mode such behaviour has no sense,
    # that's why user will be asked to run perlcritic locally.
    #
    # In fact, this parameter is a workaround for a subtle bug in generic
    # svn-client that happens when svn hook (i.e. perlcritic-checker.pl)
    # outputs too much data: svn-client just reports "Connection closed
    # unexpectedly". In order to reproduce this bug several additional
    # conditions should be met:
    # - repository access scheme: 'svn://' (svnserve daemon)
    # - client and server on different machines
    # - svn-client and -server are running on linux
    #
    # If you face the same problem, try to use the option below.
    #max_violations => 50,

    # SVN repository path -- to -- Perl::Critic's profile mapping.
    #
    # This feature allows you to apply different Perl::Critic's
    # policies for different paths in the repository. For example,
    # you can be very strict with brand-new projects, make an
    # indulgence for some existing project and completely disable
    # checking of auto-generated or third-party code.
    #
    # Each modified (added, updated, copied, moved) file name in the
    # repository is matched against a sequence of patterns below.
    # Keep in mind, *last* matching rule - wins.
    #
    # Profile paths can be either absolute or relative. In the later
    # case they will be mapped under $REPOS/hooks/perlcritic.d directory.
    profiles => [

        # Apply very strict profile by default
        {   pattern => qr{[.](pm|pl|t)$},
            profile => 'perlcritic-brutal.conf',
        },
    ],
}
